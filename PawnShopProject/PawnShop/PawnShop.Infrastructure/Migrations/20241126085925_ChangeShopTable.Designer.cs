// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PawnShop.Infrastructure.Data;

#nullable disable

namespace PawnShop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241126085925_ChangeShopTable")]
    partial class ChangeShopTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на договора");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgrreementStateId")
                        .HasColumnType("int")
                        .HasComment("Статус на договора");

                    b.Property<decimal>("Ainterest")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Лихва");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Описание");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("Срок на договора");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Крайна дата на договора");

                    b.Property<string>("GoodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Стока");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("SoftDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Заложна стойност");

                    b.Property<decimal>("ReturnPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Стойност за връщане");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Начална дата на договора");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Идентификатор на потребителя");

                    b.HasKey("Id");

                    b.HasIndex("AgrreementStateId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.AgreementState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на статус");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Име на статуса");

                    b.HasKey("Id");

                    b.ToTable("AgreementStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Аwaiting approval"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved (Active)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finished"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Late"
                        },
                        new
                        {
                            Id = 5,
                            Name = "For а Shop"
                        });
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b97f29e7-1edd-4666-a8d8-8882858d7ccf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52b69b2c-9295-4107-8acd-650047ed4241",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Boss",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbjiOLigr/8TP7FQjNvaQvpgaCZTU0nJej4sccCFPOzTEDKMUNohauMgllqutH/ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37879cf3-8994-42bc-9052-0446a677af55",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5cf194c7-b26e-42ed-8efd-d98c7980373b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f2d1452-38bf-4848-8a9d-90c5ba27dd68",
                            Email = "msef@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Seferov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MSEF@ABV.BG",
                            NormalizedUserName = "MSEF",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXI/h22lDK8tGwLP8VsohUvp62lNVORPYiaykCI2atewyZXM9BGoXYIKoZ/cZH9Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acb5f6a4-bf60-4f11-b2eb-ca822cbbec23",
                            TwoFactorEnabled = false,
                            UserName = "msef"
                        },
                        new
                        {
                            Id = "ffae7662-4ff3-4698-8f36-c4e4f392da18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd27d0bb-ea64-4ebf-afe4-1c7cb60fa8c4",
                            Email = "ksef@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Kalin",
                            LastName = "Sarafov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KSEF@ABV.BG",
                            NormalizedUserName = "KSEF",
                            PasswordHash = "AQAAAAIAAYagAAAAED8ME2FtIhCpZE+MgN1w2SrSEHQWZGMTzDjxLikBYT2/RAIpYrhKHskJKUCOlT571w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fcf90f9-ea12-4506-a9b6-51945fd79a1d",
                            TwoFactorEnabled = false,
                            UserName = "ksef"
                        },
                        new
                        {
                            Id = "70e39283-bd42-4d0a-aa2e-46d2a31c4f87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c140987f-6ff0-4917-8fa1-a4df47150a20",
                            Email = "guest@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Galin",
                            LastName = "Gogov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@ABV.BG",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEHHdOJkS2Dpx5O4/rGcxIVTCJpk5IrR5g4CY9vVS14WR/bWVxfU2hsYVGgJhXVD6Ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a04880c-a80a-431e-b9eb-e71606367e08",
                            TwoFactorEnabled = false,
                            UserName = "guest"
                        });
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sofiq,Dianabad",
                            IsDeleted = false,
                            PhoneNumber = "1234567890",
                            UserId = "5cf194c7-b26e-42ed-8efd-d98c7980373b"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Plovdiv,Izgrev",
                            IsDeleted = false,
                            PhoneNumber = "1234599999",
                            UserId = "ffae7662-4ff3-4698-8f36-c4e4f392da18"
                        });
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на лихва");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор на договора");

                    b.Property<DateTime>("DateInterest")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на внасяне на лихвата");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("SoftDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Идентификатор на потребителя");

                    b.Property<decimal>("ValueInterest")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Стойност на лихвата");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("UserId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на стоката в магазин");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор на договора");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("SoftDeleted");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Цена на стоката");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на продажба на стоката");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Agreement", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.AgreementState", "AgrreementStates")
                        .WithMany()
                        .HasForeignKey("AgrreementStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawnShop.Infrastructure.Data.Model.Client", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId");

                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", "Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AgrreementStates");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Client", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Interest", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.Agreement", "Agreement")
                        .WithMany("Interests")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawnShop.Infrastructure.Data.Model.ApplicationUser", "Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Shop", b =>
                {
                    b.HasOne("PawnShop.Infrastructure.Data.Model.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Agreement", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("PawnShop.Infrastructure.Data.Model.Client", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
